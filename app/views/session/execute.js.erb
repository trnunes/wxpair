
var view = "<%= j render(partial: 'session/treeview', locals: { resourceset: @resourceset, render_relations: @render_relations }) %>";


if($('.set').length > 0) {
	$(view).insertAfter($('.set').last());
} else {
	$(document.body).append($(view));
	
}
var $tree = $("#"+'<%=@resourceset.id%>').find("._items_area");
$(".search-input").keyup(function() {

    var searchString = $(this).val();
	
    console.log(searchString);
	if (searchString.length > 3) {
	    $tree.jstree('search', searchString);
	} else if (searchString.length == 0) {
		$tree.jstree('search', searchString);
	}
});
$tree.jstree({
    "core": {        
        "check_callback": true,
		
    },
	"checkbox" : {
      "keep_selected_style" : false
    },
    "plugins" : [ "sort", "types", "checkbox", "contextmenu", "search"],
    "search" : {
                 'case_sensitive' : false,
                 'show_only_matches' : true
            },
	"contextmenu":{         
	    "items": function($node) {
	        var tree = $("#tree").jstree(true);
			if ($('#'+$node.id).hasClass("Entity")){
		        return {

		            "Select": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Select",
		                "action": function (obj) { 
							ajax_select();
		                }
		            },
		            "Rename": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Rename",
		                "action": function (obj) { 
		                    tree.edit($node);
		                }
		            },                         
		            "Remove": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Remove",
		                "action": function (obj) { 
		                    tree.delete_node($node);
		                }
		            }
		        };			
			} else if($('#'+$node.id).hasClass("Relation")){
				return {
		            "Applied To": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Relation Of",
		                "action": function (obj) { 
							alert("Relations of");
		                }
		            },
		            "Range": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Range",
		                "action": function (obj) { 
							alert("Range");
		                }
		            }
				};
			} else if($('#'+$node.id).hasClass("Type")){
				return  {
		            "instances": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Items",
		                "action": function (obj) { 
							console.log($node.data.item);
							ajax_request('/session/instances?type=' + $node.data.item);
		                }
		            },
		            "relations": {
		                "separator_before": false,
		                "separator_after": false,
		                "label": "Relations for this type",
		                "action": function (obj) { 
							alert("Relations");
		                }
		            }
				};		
			}
	    }
	}
});

$($tree.jstree().get_json($tree, {
  flat: true
})).each(function(index, value) {
	var node = $tree.jstree().get_node(this.id);
	node.data = {item: node.text.trim()};
  
});

$tree.jstree().hide_checkboxes();

$tree.on("before_open.jstree", function (e, data) {

	var node_to_open = data.node

	for ( var i =0; i < node_to_open.children.length; i++) {
		var child = $('#<%=@resourceset.id%>').find('._items_area').jstree().get_node(node_to_open.children[i])
		console.log(child)
		if (child.text === "Relations") {
			console.log("Deleting child: ")
			console.log(child)
			$('#<%=@resourceset.id%>').find('._items_area').jstree().delete_node(child);
		}		
	}
	
	if(node_to_open.children.length == 0) {
		$.ajax(	{			
			type: "GET",
			url: "/session/relations?id="+node_to_open.text,
			data_type: "script",
			success: function(data, status, jqrequest) {

				console.log(relations_subtree);
				for (var i = 0; i < relations_json.length; i++) {
					$('#<%=@resourceset.id%>').find('._items_area').jstree().create_node(node_to_open, relations_json[i], "first");
				}

			}
		});
	}
});

register_tree_selection_behavior();
create_set_context_menu('<%=@resourceset.id%>');
create_pivot_menu('<%=@resourceset.id%>');

init_all();


$('.set').last().hide();

$('.set').last().toggle({
    effect: 'scale',
	direction: "horizontal"
});

